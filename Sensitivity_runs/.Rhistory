anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
model.summaries$n
unique(Dev.quants.ggplot$Model_name)
1:model.summaries$n-1
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
2:(model.summaries$n)
unique(Dev.quants.ggplot$Model_name)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
source('F:/JMC/Documents/GitHub/Stock-Assessment-Sensitivity-Plots/SS_Sensi_plot.R')
#Run the sensitivity plot function
SS_Sensi_plot(model.summaries=model.summaries,
current.year=2019,
mod.names=mod.names, #List the names of the sensitivity runs
likelihood.out=c(1,1,0),
Sensi.RE.out="Sensi_RE_out.DMP", #Saved file of relative errors
CI=0.95, #Confidence interval box based on the reference model
TRP.in=0.4, #Target relative abundance value
LRP.in=0.25, #Limit relative abundance value
sensi_xlab="Sensitivity scenarios", #X-axis label
ylims.in=c(-1,1,-1,1,-1,1,-1,1,-1,1,-1,1), #Y-axis label
plot.figs=c(1,1,1,1,1,1), #Which plots to make/save?
sensi.type.breaks=c(6.5,9.5,13.5,16.5), #vertical breaks that can separate out types of sensitivities
anno.x=c(3.75,8,11.5,15,18), # Vertical positioning of the sensitivity types labels
anno.y=c(1,1,1,1,1), # Horizontal positioning of the sensitivity types labels
anno.lab=c("Natural mortality","VBGF/Mat.","Recruitment","Data Wts.","Other") #Sensitivity types labels
)
remove.packages("sss", lib="~/R/R-4.0.0/library")
library(devtools)
devtools::install_github("shcaba/SSS", build_vignettes = TRUE)
